#ifndef MESSAGEPARSER_H
#define MESSAGEPARSER_H

#include <QString>

/// @brief The command field (message-type) defines the overall properties of a message
enum MessageCommand
{
    CommandPresentation     = 0,    //!< Sent by a node when they present attached sensors. This is usually done in presentation() at startup.
    CommandSet              = 1,    //!< This message is sent from or to a sensor when a sensor value should be updated.
    CommandRequest          = 2,    //!< Requests a variable value (usually from an actuator destined for controller).
    CommandInternal         = 3,    //!< Internal MySensors messages (also include common messages provided/generated by the library).
    CommandStream           = 4     //!< For firmware and other larger chunks of data that need to be divided into pieces.
};

enum MessageSensor
{
    SensorBinary            = 3,    //!< Binary light or relay, V_STATUS, V_WATT
    SensorArduinoNode       = 17    //!< Used (internally) for presenting a non-repeating Arduino node
};

enum MessageData
{
    DataStatus              = 2, 	//!< S_BINARY, S_DIMMER, S_SPRINKLER, S_HVAC, S_HEATER. Used for setting/reporting binary (on/off) status. 1=on, 0=off
    DataWatt    			= 17	//!< S_POWER, S_BINARY, S_DIMMER, S_RGB_LIGHT, S_RGBW_LIGHT. Watt value for power meters
};

enum MessageInternal
{
    InternalGatewayReady    = 14    //!< Gateway ready
};

struct Message
{
    int     nodeId;
    int     childSensorId;
    int     command;
    bool    ack;
    int     type;
    QString payload;

    operator QString() const { return QString("%1:%2 %3 %4 %5 '%6'")
                                        .arg(nodeId)
                                        .arg(childSensorId)
                                        .arg(command)
                                        .arg(ack)
                                        .arg(type)
                                        .arg(payload); }

    QString toSerialFormat() const { return QString("%1;%2;%3;%4;%5;%6\n")
                                        .arg(nodeId)
                                        .arg(childSensorId)
                                        .arg(command)
                                        .arg(ack?1:0)
                                        .arg(type)
                                        .arg(payload); }
};

class MessageParser
{
public:
    MessageParser();

    static Message parseMessage(const QString &data);
};

#endif // MESSAGEPARSER_H
